import { BackendModule, Services, ReadCallback, Resource, InitOptions } from 'i18next';
export interface Cache {
    /**
     * Reads a locale from cache.
     * @param {string} key - the key which was used to save the locale in the cache.
     * @returns {Promise<string>} - A Promise that when resolved, returns the json serialized locale.
     */
    read(key: string): Promise<string>;
    /**
     * Writes a locale from cache.
     * @param {string} key - the key which will be used to save the locale in the cache.
     * @param {string} value - The json serialized locale.
     * @returns {Promise<string>} - A Promise that when resolved, indicates that the locale was stored.
     */
    write(key: string, value: string): Promise<void>;
}
export interface CalingaBackendOptions {
    organization: string;
    team: string;
    project: string;
    serviceBaseUrl?: string;
    cache?: Cache;
    resources?: Resource;
    devMode?: boolean;
    /**
     * Fetch draft translations if available
     */
    includeDrafts?: boolean;
}
export declare class CalingaBackend implements BackendModule<CalingaBackendOptions> {
    static type: string;
    type: 'backend';
    services: Services;
    options: CalingaBackendOptions;
    loadPath: string;
    localesPath: string;
    static languages: string[];
    static onLanguagesChanged: (languages: string[]) => void;
    constructor(services: Services, backendOptions: CalingaBackendOptions, options: InitOptions);
    init(services: Services, backendOptions: CalingaBackendOptions, options: InitOptions): void;
    create(languages: string[], namespace: string, key: string, fallbackValue: string): void;
    read(language: string, namespace: string, callback: ReadCallback): Promise<void>;
    private loadLanguages;
    private getDefaultOptions;
    private buildKey;
    private buildEtagKey;
}
